// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cmd_gradec
#define inlib_cmd_gradec

#include "session"

#include "../SDSS"
#include "../fradecs"
#include "../radecs"

#include <fstream>

namespace inlib {
namespace cmd {

// used in exlib/cbk/SDSS/action_one_remote.
class gradec_cmd : public base_cmd {
  typedef base_cmd parent;
public:
  virtual void exec(session& a_session,
                    const std::vector<std::string>& a_args,
                    std::ostream& a_sout,std::ostream& a_out) {
    if(a_args.size()!=2) {
      a_session.reply_failed(a_sout,"gradec_cmd : two argument expected.");
      return;
    }    
    double ra;
    if(!to<double>(a_args[0],ra)) {
      a_session.reply_failed(a_sout,"gradec_cmd : first argument not a double.");
      return;
    }
    double dec;
    if(!to<double>(a_args[1],dec)) {
      a_session.reply_failed(a_sout,"gradec_cmd : second argument not a double.");
      return;
    }

    if(m_vfradecs.empty()) {
      std::string fpCs_csv = m_data_dir+"/Stripe_82_tmp/1/files.csv";
      if(!read_fradecs(fpCs_csv,m_vfradecs)) {
        a_session.reply_failed(a_sout,"gradec_cmd : cannot read "+fpCs_csv+" does not exist.");
        return;
      } 
    }

    std::string ss;
    double radecs[8];
    if(!search_radec(m_sky_radius,m_vfradecs,ra,dec,ss,radecs)) {
      a_session.reply_failed(a_sout,"gradec_cmd : radec not found.");
      return;
    }

    std::string path = "/Stripe_82_tmp/1/"+ss;
    path = m_data_dir+path;

    if(!file::exists(path)) {
      a_session.reply_failed(a_sout,"gradec_cmd : none existing file "+path);
      return;
    } 
    std::ifstream ifs(path.c_str());
    if(!ifs.is_open()) {
      a_session.reply_failed(a_sout,"gradec_cmd : can't open file "+path);
      return;
    } 
    a_out << ifs.rdbuf();
    if(a_session.verbose()) ::printf("gradec_cmd : \"%s\" ok.\n",path.c_str());
  }
public:
  gradec_cmd(const std::string& a_data_dir,double a_sky_radius)
  :parent()
  ,m_data_dir(a_data_dir)
  ,m_sky_radius(a_sky_radius)
  {}
  virtual ~gradec_cmd(){}
public:
  gradec_cmd(const gradec_cmd& a_from)
  :parent(a_from)
  ,m_data_dir(a_from.m_data_dir)
  ,m_sky_radius(a_from.m_sky_radius)
  {}
  gradec_cmd& operator=(const gradec_cmd& a_from){
    parent::operator=(a_from);
    m_data_dir = a_from.m_data_dir;
    m_sky_radius = a_from.m_sky_radius;
    return *this;
  }
protected:
  std::vector<fradecs> m_vfradecs;
  std::string m_data_dir;
  double m_sky_radius;
};

}}

//inlib_build_use kernel

#endif
