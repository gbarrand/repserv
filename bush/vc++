#!/bin/sh -f

verbose=no

compile=no
language=none

x_language=none

Is=
Ds=
ws=

file_o=
file_cpp=

bigobj=no

libs=
objs=

while test $# -ge 1 ; do
  case $1 in
    -c) compile=yes;;
    -verbose) verbose=yes;;
    -x) if [ $# -ge 2 ] ; then x_language=$2;shift; fi;;
    -o) if [ $# -ge 2 ] ; then file_o=$2;shift; fi;;
    -I*) path="`echo $1 | sed -e 's:-I::g'`";path="`cygpath -w -a ${path}`";path="'${path}'";Is="${Is} /I${path}";;
    -D*) Ds="${Ds} $1";;
    -w*) ws="${ws} $1";;
    -bigobj) bigobj=yes;;
    -*) echo "bush/vc++ : unknown minus option $1";exit;;
     *) suffix=`echo $1 | sed 's:.*\.::'`
        if [ "${suffix}" = a ] ; then
          libs="${libs} $1"
        elif [ "${suffix}" = lib ] ; then
          libs="${libs} $1"
        elif [ "${suffix}" = o ] ; then
          objs="${objs} $1"
        else
          if [ $# = 1 ] ; then
            file_cpp=$1
          else
            echo "bush/vc++ : unknown option : $1"
            exit
          fi
        fi;;
  esac
  shift
done

if [ "${file_o}" = "" ] ; then
  echo "bush/vc++ : no .o given."
  exit
fi

file_o="`cygpath -w -a ${file_o}`";file_o="'${file_o}'"

#/////////////////////////////////////////////////////
#/// compile : ///////////////////////////////////////
#/////////////////////////////////////////////////////
if [ "${compile}" = "yes" ] ; then

if [ "${file_cpp}" = "" ] ; then
  echo "bush/vc++ : no file to compile."
  exit
fi

Is="`echo ${Is} | sed -e 's:-I:/I:g'`"
Ds="`echo ${Ds} | sed -e 's:-D:/D:g'`"
ws="`echo ${ws} | sed -e 's:-w:/w:g'`"

cl_exe_cmd="cl.exe "
#cl_exe_cmd="echo "

if [ ${bigobj} = yes ] ; then cl_exe_cmd="${cl_exe_cmd} /bigobj"; fi

if [ ${language} = none ] ; then
  suffix=`echo ${file_cpp} | sed 's:.*\.::'`
  language=c++ #default for files without extension.
  if [ "${suffix}" = c   ] ; then language=c;   fi
  if [ "${suffix}" = cpp ] ; then language=c++; fi
  if [ "${suffix}" = cc  ] ; then language=c++; fi
  if [ "${suffix}" = cxx ] ; then language=c++; fi
fi

if [ "${x_language}" != "none" ] ; then
  if [ "${x_language}" != "${language}" ] ; then
    echo "warning : -x language '${x_language}' differ from guessed language '${language}'."
  fi
fi

if [ ${language} = c++ ] ; then
  cl_exe_cmd="${cl_exe_cmd} /nologo /MD /O2 /W3 /EHsc /GR"
else
  cl_exe_cmd="${cl_exe_cmd} /nologo /MD /O2 /W3" 
fi

# rm painfull warnings about API strcpy, etc... deprecated :
cl_exe_cmd="${cl_exe_cmd} /wd4996"

# enforce error on "size_t on unsigned int" :
#cl_exe_cmd="${cl_exe_cmd} /we4267"

cl_exe_cmd="${cl_exe_cmd} /c" 

if [ "${Is}" != "" ] ; then cl_exe_cmd="${cl_exe_cmd} ${Is}"; fi
if [ "${Ds}" != "" ] ; then cl_exe_cmd="${cl_exe_cmd} ${Ds}"; fi

cl_exe_cmd="${cl_exe_cmd} /Fo${file_o}"

if [ ${language} = c++ ] ; then
  cl_exe_cmd="${cl_exe_cmd} /Tp${file_cpp}"
elif [ ${language} = c ] ; then
  cl_exe_cmd="${cl_exe_cmd} ${file_cpp}"
else
  echo "bush/vc++ : unknown language ${language}"
  exit
fi

if [ ${verbose} = yes ] ; then echo "${cl_exe_cmd}";fi

/bin/rm -f ./cl_exe_tmp
eval ${cl_exe_cmd} > ./cl_exe_tmp
use_status=$?
if [ ${use_status} != 0 ] ; then
  cat ./cl_exe_tmp
  /bin/rm -f ./cl_exe_tmp
  exit ${use_status}
else
  /bin/rm -f ./cl_exe_tmp
  exit 0
fi

else
#/////////////////////////////////////////////////////
#/// link : //////////////////////////////////////////
#/////////////////////////////////////////////////////

  link_exe_cmd=

  # NOTE : cygwin adds /usr/bin in front of PATH, and this directory
  #        contains a link.exe which is not the VisualC++ one. Then
  #        we arrange to give the full path toward the VisualC++ one.

  if [ "${MSVCDir}" != "" ] ;  then
    # Visual Studio 2003
    vc_linker_path="`cygpath \"${MSVCDir}\"/bin`"
    link_exe_cmd="\"${vc_linker_path}\"/link.exe"
  else
    if [ "${VCINSTALLDIR}" != "" ] ;  then
      # Visual Studio >= 9.0
      vc_linker_path="`cygpath \"${VCINSTALLDIR}\"/bin`"
      link_exe_cmd="\"${vc_linker_path}\"/link.exe"
    else
      echo "bush/vc++ : Env variables MSVCDir and VCINSTALLDIR not defined."
      echo "bush/vc++ : You have to setup Visual."
      exit
    fi  
  fi  

  link_exe_cmd="${link_exe_cmd} /nologo" 

  file_o="${file_o}.exe"

  if [ ${verbose} = yes ] ; then echo "${link_exe_cmd}";fi

  /bin/rm -f ./link_exe_tmp
  eval ${link_exe_cmd} /out:${file_o} ${objs} ${libs} > ./link_exe_tmp
  use_status=$?
  if [ ${use_status} != 0 ] ; then
    cat ./link_exe_tmp
    /bin/rm -f ./link_exe_tmp
    exit ${use_status}
  else
    /bin/rm -f ./link_exe_tmp
    exit 0
  fi

  file_exe_manifest="${file_exe}.manifest"

fi
#/////////////////////////////////////////////////////
#/////////////////////////////////////////////////////
#/////////////////////////////////////////////////////
